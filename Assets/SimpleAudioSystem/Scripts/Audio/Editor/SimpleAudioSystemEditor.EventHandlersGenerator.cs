using System.Linq;
using System;
using System.IO;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using ACFW;
using SimpleAudioSystem.Settings;

namespace SimpleAudioSystem.Editor
{
    public partial class SimpleAudioSystemEditor
    {
        private static class EventHandlersGenerator
        {
            private readonly static string scriptTemplate = @"// This file is automatically generated by Unity script GenerateEventSubscribers.cs
// Do not edit it!
// To regenerate, use Unity menu item 'Tools/Generate audio event subscribers'
using System;
using UnityEngine;
using ACFW;
using SimpleAudioSystem.Environment;

namespace SimpleAudioSystem
{{
    public class AudioEventsSubscriber : MonoBehaviour, IAudioEventHandler
    {{
        private IServiceLocator environment;
        private IEventManager EventManager => environment.Get<IEventManager>();

        public void Init(IServiceLocator environment)
        {{
            this.environment = environment;
{0}
        }}

{1}
    }}
}}
";

            private readonly static string subscriptionTemplate = "            EventManager.Get<{0}>().{1} += {2};\r\n";
            private readonly static string handlerTemplate = @"        private void {0}({1})
        {{
            EventManager.Get<AudioEvents>().{2}?.Invoke({3});
        }}
";

            private readonly static string sfxEventName = "PlaySFX";
            private readonly static string musicEventName = "PlayMusic";

            private class ScriptParts
            {
                public List<string> subscriptions = new List<string>();
                public List<string> handlers = new List<string>();
            }

            public static void Generate(string filename, AudioClipSettings audioClipSettings, AudioEventSettings audioEventSettings)
            {
                if (!string.IsNullOrEmpty(filename) && audioEventSettings != null)
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(filename));
                    var scriptParts = new ScriptParts();
                    var subParts = GenerateSFXSubscribers(audioClipSettings, audioEventSettings.sfxDescriptors);
                    if (subParts != null)
                    {
                        scriptParts.subscriptions.AddRange(subParts.subscriptions);
                        scriptParts.handlers.AddRange(subParts.handlers);
                    }
                    subParts = GenerateMusicSubscribers(audioClipSettings, audioEventSettings.musicDescriptors);
                    if (subParts != null)
                    {
                        scriptParts.subscriptions.AddRange(subParts.subscriptions);
                        scriptParts.handlers.AddRange(subParts.handlers);
                    }
                    using (StreamWriter writer = new StreamWriter(filename))
                    {
                        string scriptText = string.Format(scriptTemplate, string.Join(string.Empty, scriptParts.subscriptions), string.Join(string.Empty, scriptParts.handlers));
                        writer.Write(scriptText);
                    }
                    AssetDatabase.Refresh();
                }
                else
                {
                    UnityEngine.Debug.LogError($"audioEventSettings is empty");
                }
            }

            private static List<Type> eventRealms = null;
            private static List<Type> EventRealms
            {
                get
                {
                    if (eventRealms == null)
                    {
                        Type iept = typeof(IEventProvider);
                        eventRealms = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes()).Where(t => t != iept && iept.IsAssignableFrom(t)).ToList();
                    }
                    return eventRealms;
                }
            }

            private static string GenerateRelativeEventRealm(EventDescriptor descriptor)
            {
                string result = string.Empty;
                var eventRealm = EventRealms.FirstOrDefault(t => t.Name == descriptor.eventRealm);
                var eventRealmName = eventRealm.FullName;
                result = eventRealmName;
                return result;
            }

            private static string GenerateHandlerArgs(EventDescriptor descriptor)
            {
                string result = string.Empty;
                var eventRealm = EventRealms.FirstOrDefault(t => t.Name == descriptor.eventRealm);
                if (eventRealm != null)
                {
                    var eventField = eventRealm.GetFields().FirstOrDefault(e => e.Name == descriptor.eventName);
                    if (eventField != null)
                    {
                        var eventFieldType = eventField.FieldType;
                        var eventFieldGenericArguments = eventFieldType.IsGenericType ? eventFieldType.GetGenericArguments() : new Type[0];
                        switch (eventFieldGenericArguments.Length)
                        {
                            case 0:
                                break;
                            default:
                                string delimiter = string.Empty;
                                for (int i = 0; i < eventFieldGenericArguments.Length; ++i)
                                {
                                    var arg = eventFieldGenericArguments[i];
                                    result += delimiter + arg.Name + " arg" + (i + 1).ToString();
                                    delimiter = ", ";
                                }
                                break;
                        }
                    }
                }
                return result;
            }

            private static ScriptParts GenerateSFXSubscribers(AudioClipSettings audioClipSettings, SFXEventDescriptor[] descriptors)
            {
                var tree = MusicSFXTypesGenerator.CreateSFXTree(audioClipSettings);
                ScriptParts scriptParts = new ScriptParts();
                foreach (var descriptor in descriptors)
                {
                    Debug.Log($"Parsing {descriptor.GetType().Name}: eventRealm={descriptor.eventRealm}, eventName={descriptor.eventName}, value={descriptor.sfxType}");
                    string handlerName = $"{descriptor.eventRealm}_{descriptor.eventName}_{descriptor.sfxType}";
                    scriptParts.subscriptions.Add(string.Format(subscriptionTemplate, GenerateRelativeEventRealm(descriptor), descriptor.eventName, handlerName));
                    string valuePath = nameof(SFXTrackType) + "." + tree.GetLeafPath(descriptor.sfxType).Replace("/", ".");
                    scriptParts.handlers.Add(string.Format(handlerTemplate, handlerName, GenerateHandlerArgs(descriptor), sfxEventName, valuePath /*descriptor.sfxType.ToString()*/));
                }
                return scriptParts;
            }

            private static ScriptParts GenerateMusicSubscribers(AudioClipSettings audioClipSettings, MusicEventDescriptor[] descriptors)
            {
                var tree = MusicSFXTypesGenerator.CreateMusicTree(audioClipSettings);
                ScriptParts scriptParts = new ScriptParts();
                foreach (var descriptor in descriptors)
                {
                    Debug.Log($"Parsing {descriptor.GetType().Name}: eventRealm={descriptor.eventRealm}, eventName={descriptor.eventName}, value={descriptor.musicType}");
                    string handlerName = $"{descriptor.eventRealm}_{descriptor.eventName}_{descriptor.musicType}";
                    scriptParts.subscriptions.Add(string.Format(subscriptionTemplate, GenerateRelativeEventRealm(descriptor), descriptor.eventName, handlerName));
                    string valuePath = nameof(MusicTrackType) + "." + tree.GetLeafPath(descriptor.musicType).Replace("/", ".");
                    scriptParts.handlers.Add(string.Format(handlerTemplate, handlerName, GenerateHandlerArgs(descriptor), musicEventName, valuePath /*descriptor.musicType.ToString()*/));
                }
                return scriptParts;
            }
        }
    }
}
